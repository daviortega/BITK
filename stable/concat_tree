#! /usr/bin/env python 
###################################
#    Davi Ortega 6/18/2014 
###################################
import sys
import time
import bitk
import os
import pymongo
import json
import multiprocessing as multip


path_to_files = '/home/ortegad/MIST3/TOL/'
try:
	os.system('ln -s ' + path_to_files + 'cdds/ ./')
except:
	pass

try:
	os.system('ln -s ' + path_to_files + 'genomes/ ./')
except:
	pass

if '-h' in sys.argv:
	print "concat_tree: build concatenated alignment to build automated tree of life from Bork'sselected COGs or your own (using --build-new-db) \n \
		Stages are: --rps (--build-new-db model1,model2,model3) --seqdepot --mongo --prep-align --align --concat --gb --prep-tree --tree --post-tree\n\n \
		Options: --auto-fix   : Automatic work arounds to ensure complete execution of the script\n \
			 --NPraxml N  : Number of processors used to build the tree with RAxML (default: 20)\n \
			 --NPrps N    : Number of RPS-BLAST jobs executed at once (default 12)"
	sys.exit()

if '--NPraxml' in sys.argv:
	try:
		NPraxml = int(sys.argv[sys.argv.index('--NPraxml') + 1])
	except:
		print "No integer passed as the --NPraxml argument\nTry something like this: --NPraxml 12"
		sys.exit()
else:
	NPraxml = 20


if '--NPrps' in sys.argv:
        try:
                NPrps = int(sys.argv[sys.argv.index('--NPrps')+ 1])
        except:
                print "No integer passed as the --NPrps argument\nTry something like this: --NPrps 12"
	        sys.exit()
else:
	NPrps = 12



#client = pymongo.MongoClient('localhost',27019)
print "Verifying tunnels"
print "Mist"
try:
	client = pymongo.MongoClient('localhost',27019)
except:
        print "You must open a tunnel with ares.bio.utk.edu: ssh -L 27019:localhost:27017 ares.bio.utk.edu"
        sys.exit()
mist = client.mist22

print "SeqDepot"
try:
	client2 = pymongo.MongoClient('localhost', 27018)
except:
	print "You must open a tunnel with aphrodite.bio.utk.edu: ssh -L 27018:localhost:27017 aphrodite.bio.utk.edu"
	sys.exit()

seqdepot = client2.seqdepot
	


# READ MIST IDs FROM FILE.
def read_input(filename):
	orgfile = open(filename,'r')
	mid_list = []
	for line in orgfile:
		mid_list.append(line.replace('\n',''))
	orgfile.close()
	return mid_list

mid_list = read_input(sys.argv[1])
mid_list_original = mid_list

def run_rps(mid):
	global dbname
	print "RPS-BLAST of genome " + mid
        os.system('rpsblast -query ./genomes/mist22.' + mid + '.fa -db ' + dbname + ' -evalue 0.1 -outfmt 6 -out rps.mist22.' + mid + '.dat')
        print "Working on genome " + mid
        seq_dic = {'gid' : mid }
        cog_list_tmp = []
        rpsout = open('rps.mist22.' + mid + '.dat','r')
        for line in rpsout:
        	fields = line.split('\t')
                if fields[1] not in cog_list_tmp:
                	cog_list_tmp.append(fields[1])
                        seq_dic[fields[1]] = [ fields[0], float(fields[10]) ]
                elif seq_dic[fields[1]][1] > float(fields[10]):
#                       print "older: " + str(seq_dic[fields[1]][1])
#                       print "new: " + str(float(fields[10]))
                        seq_dic[fields[1]] = [ fields[0], float(fields[10]) ]
        rpsout.close()
        cog_list_tmp.sort()
	seq_dic['cog_list'] = cog_list_tmp
	
#	Saving the results
	with open('rps.mist22.' + mid + '.json', 'w') as f:
		json.dump(seq_dic, f, sort_keys=True, indent = 4)





#RUN RPS-BLAST

mongo_card = []
seq_dic = {}
cog_list = []
problems = []

if '--build-new-db' in sys.argv:
	print 'Selecting models: '
	models = '\n'.join([ './cdds/' + model + '.smp' for model in sys.argv[sys.argv.index('--build-new-db')+1].split(',')])
	print models




if '--rps' in sys.argv:
	print "Starting RPS section:"
	if '--build-new-db' in sys.argv:
		try:
			os.system('ln -s ~/MIST3/TOL/cdds/ ./')
		except:
			pass
		print 'Making the database: '
		with open('models.pn','w') as f:
			f.write(models)
		
		os.system('makeprofiledb -title TempConcatTree.v001 -in models.pn -out TempConcatTree -dbtype rps -index true')
		os.system('mkdir TempDB')
		os.system('mv TempConcatTree* ./TempDB')
		dbname = './TempDB/TempConcatTree'

	else:
		dbname = '~/MIST3/TOL/TOLdb/CogTOL2'

	try:
		os.system('ln -s ~/MIST3/TOL/genomes/ ./')
	except:
		pass
#		os.system('rm -r ./genomes')
#		os.system('ln -s ~/MIST3/TOL/genomes/ ./')

	if '--update-mongo' in sys.argv:
		mid_list_tmp = []
		local = pymongo.MongoClient()
		tol = local.tol
		tolc = tol.tolc
		for mid in mid_list:
			if tolc.find_one({'gid': mid},{}) == None:
				mid_list_tmp.append(mid)
		mid_list_original = mid_list
		mid_list = mid_list_tmp
#	print mid_list
#	print len(mid_list)
#	time.sleep(5)

	if len(mid_list) < NPrps:
		NPrps = len(mid_list)
	pool = multip.Pool(processes=NPrps)
	pool.map(run_rps, mid_list)

	for mid in mid_list:
		fin = open('rps.mist22.' + mid + '.json', 'r')
		seq_dic = json.load(fin)
		fin.close()
		if cog_list == []:
			cog_list = [x for x in seq_dic['cog_list']]
			problem = None
		elif cog_list != seq_dic['cog_list']:
			problem = mid + ": The genome " + mid + " does not have the following hits: " + ' '.join(list(set(cog_list) - set(seq_dic['cog_list'])))
		else:
			problem = None

		if not problem:
			print "Genome " + mid + " is good"
			mongo_card.append(seq_dic)
			cog_list = seq_dic['cog_list']
		else:
			print problem
			problems.append(problem)

	if len(problems) != 0:
		print "List of problems: "
		print '\n'.join(problems)
		if '--auto-fix' not in sys.argv:
	        	sys.exit()
		else:
			print "AUTO-FIX: Let's ignore those..."
			print "Saving the prelim data at data.json"
			with open('data.json','w') as f:
				json.dump(mongo_card, f, sort_keys=True, indent = 4)
	else:
		print "Saving the prelim data at data.json"
	        with open('data.json','w') as f:
        	        json.dump(mongo_card, f, sort_keys=True, indent = 4)



elif '--use-current-mongo' not in sys.argv:
	fin = open('data.json','r')
	mongo_card = json.load(fin)
	fin.close()

if '--seqdepot' in sys.argv:
	#print mongo_card
	pacs = []

	for card in mongo_card:
		for key, value in card.iteritems():
			if key != 'gid' and key != 'cog_list':
				pacs.append(value[0].split('-')[-1])

	#Getting info from MIST
	print "Retriving information from MIST"
	all_ids = mist.genes.find({"p.ac": { "$in" : pacs }}, {"p.aid":1, "p.ac":1})
	all_ids_proc = {}
	all_p_aid = []
	print "Parsing information from MIST"
#	all_ids_json = []
	for ids in all_ids:
#		all_ids_json.append(ids)
		all_ids_proc[ids['p']['ac']] = ids['p']['aid']
		all_p_aid.append(ids['p']['aid'])
	print "Retriving information from Seqdepot"
	all_seq = seqdepot.aseqs.find( {'_id' : { '$in' : all_p_aid }}, {'s':1})
	print "Parsing information from SeqDepot"
	all_seq_proc = {}
	for seq in all_seq:
		all_seq_proc[seq['_id']] = seq['s']
	
	if '--debug' in sys.argv:
		with open('all_ids_proc.json', 'w') as f:
			json.dump(all_ids_proc, f, sort_keys=True, indent = 4)
		with open('all_ids_json.json', 'w') as f:
		        json.dump(all_ids_json, f, sort_keys=True, indent = 4)



	print "Processing the data from MIST and SeqDepot"	
	
	new_mongo = []
	for card in mongo_card:
		seq_dic = {'gid' : card['gid']}
#		print card['gid']
		for key, value in card.iteritems():
			if key != 'gid' and key != 'cog_list':
				pac = value[0].split('-')[-1]
				try:
					_id = all_ids_proc[pac]
				except KeyError:
					print "Some accesion number have not been found. Maybe the sequence tag was not correct:"
					print pac
					print value
					sys.exit()
				seq = all_seq_proc[_id]
				seq_dic[key] = {'s' : seq}
#				p_aid = mist.genes.find_one({"p.ac":pac},{"p.aid":1})
#				print p_aid
#				seq = seqdepot.aseqs.find_one({"_id": p_aid["p"]["aid"]}, {"s":1})
#				seq_dic[key] = { 't' : value[0], '_id' : p_aid['p']["aid"], 's' : seq['s']}
		new_mongo.append(seq_dic)
	print " Saving...."
	if '--build-new-db' in sys.argv:
		with open('tol.mongo.tmp.json','w') as f:
			json.dump(new_mongo, f, sort_keys=True, indent = 4)
	else:
		with open('tol.mongo.json','w') as f:
			json.dump(new_mongo, f, sort_keys=True, indent = 4)
elif '--use-current-mongo' not in sys.argv:
	if '--build-new-db' in sys.argv:
		fin = open('tol.mongo.tmp.json','r')
	        new_mongo = json.load(fin)
	        fin.close()
	else:
		fin = open('tol.mongo.json','r')
		new_mongo = json.load(fin)
		fin.close()

if '--mongo' in sys.argv:
	print '\n-----------------------------------------------------------------------'
	print 'Pushing data into local database'
	if '--build-new-db' in sys.argv:
		local = pymongo.MongoClient()
		tolTmp = local.tolTmp
		tolTmp.tolc.drop()
		tolc = tolTmp.tolc
		tolc.insert(new_mongo)
	else:
		local = pymongo.MongoClient()
		tol = local.tol
		if '--update-mongo' in sys.argv:
			tolc = tol.tolc
			for card in new_mongo:
				if tolc.find_one({'gid': card['gid']}) == None:
					print "Card inserted: " + str(card['gid'])
					tolc.insert(card)
		else:
			tol.tolc.drop()
			tolc = tol.tolc
			tolc.insert(new_mongo)

mid_list = mid_list_original

if '--prep-align' in sys.argv:
	# building alignments fasta files
	if '--build-new-db' in sys.argv:
		local = pymongo.MongoClient()
		tolTmp = local.tolTmp
		tolc = tolTmp.tolc
		new_mongo = tolc.find()
	else:

		local = pymongo.MongoClient()
		tol = local.tol
		tolc = tol.tolc
		new_mongo = tolc.find()
	
	aln_dic = {}

	print "Building the alignment files"
	for card in new_mongo:
		if card['gid'] in mid_list:
			for cog, info in card.iteritems():
				if cog not in ['gid', '_id']:
#					print cog
#					print info
#					print card
					if cog not in aln_dic.keys():
						aln_dic[cog] = '>' + card['gid'] + '\n' + info['s'] + '\n'
					else:
						aln_dic[cog] += '>' + card['gid'] + '\n' + info['s'] + '\n'
	
	if '--auto-fix' not in sys.argv:
		if len(aln_dic[aln_dic.keys()[0]]) != len(mid_list):
			print len(aln_dic[aln_dic.keys()[0]])
			print len(mid_list)
			print "There are genomes here that are not in the database. Run the entire pipeline with the --update-mongo to update the database with the new sequences"
			sys.exit()
	print "saving all of them and pushing a list of COGs to a new collection on the database"
	cog_list = []
	for cog in aln_dic.keys():
		print "There are " + str(aln_dic[cog].count('>')) + " in cog " + cog
		cog_list.append(cog)
		alnout = open( 'cdd.' + cog.split('|')[-1] + '.fa', 'w')
		alnout.write(aln_dic[cog])
		alnout.close()
	
	if '--build-new-db' in sys.argv:
		tolTmp.cdds.drop()
		cdds = tolTmp.cdds
		cdds.insert({'cogs' : cog_list})
	else:
		tol.cdds.drop()
		cdds = tol.cdds
		cdds.insert({'cogs': cog_list})


if '--align' in sys.argv:
	if '--build-new-db' in sys.argv:
		local = pymongo.MongoClient()
	        tolTmp = local.tolTmp
	        tolc = tolTmp.tolc
	        cdds = tolTmp.cdds
	        new_mongo = tolc.find()
        	cog_list = cdds.find_one()
	else:	
		local = pymongo.MongoClient()
		tol = local.tol
		tolc = tol.tolc
		cdds = tol.cdds
		new_mongo = tolc.find()
		cog_list = cdds.find_one()

	def submit_to_linsi(fasta = ''):
#		print "Aligning " + fasta
		os.system(' linsi --quiet --thread 12 ' + fasta + ' > ' + fasta[:-3] + '.linsi.fa')
	
	for cog in cog_list['cogs']:
		print "Aligning " + cog
		submit_to_linsi( 'cdd.' + cog.split('|')[-1] + '.fa' )

if '--concat' in sys.argv:
        if '--build-new-db' in sys.argv:
                local = pymongo.MongoClient()
                tolTmp = local.tolTmp
                cdds = tolTmp.cdds
                new_mongo = tolc.find()
                cog_list = cdds.find_one()
	else:
	        local = pymongo.MongoClient()
        	tol = local.tol
	        cdds = tol.cdds
		cog_list = cdds.find_one()
		
	concat = {}
	print "Concatenating the alignments"
	for cog in cog_list['cogs']:
		seq_dic, tags = bitk.fastareader('cdd.' + cog.split('|')[-1] + '.linsi.fa', 'r')
		for tag in tags:
			if tag not in concat.keys():
				concat[tag] = seq_dic[tag]
			else:
				concat[tag] += seq_dic[tag]
	
	print "Saving the full alignment and checking for bugs"
	
	output = ''
	max_len = 0

	for tag in tags:
		output += '>' + tag + '\n' + concat[tag] + '\n'
		if max_len == 0:
			max_len = len(concat[tag])
		elif max_len != len(concat[tag]):
			print "Something is wrong with the genome: " + tag
			print len(concat[tag])
#			sys.exit()
	if '--build-new-db' in sys.argv:
                fout = open('concat.tmp.fa', 'w')
                fout.write(output)
                fout.close()

	else:
		fout = open('concat.fa', 'w')
		fout.write(output)
		fout.close()
			
if '--gb' in sys.argv:
	if '--build-new-db' in sys.argv:
                os.system('Gblocks concat.tmp.fa -b3=8 -b4=2 -b5=h')
                os.system('mv concat.tmp.fa-gb concat.tmp.gb.fa')

	else:
		os.system('Gblocks concat.fa -b3=8 -b4=2 -b5=h')
		os.system('mv concat.fa-gb concat.gb.fa')
	
if '--prep-tree' in sys.argv:
	if '--build-new-db' in sys.argv:
		seq_dic, tags = bitk.fastareader('concat.tmp.gb.fa')
	else:
		seq_dic, tags = bitk.fastareader('concat.gb.fa')
	tags = [ int(i) for i in tags]
	names = mist.genomes.find({'_id' :  { '$in' : tags }}, {'n' : 1})
	names_dic = {}
	for name in names:
		names_dic[name['_id']] = name['n']
		
	output = ''
	for tag in tags:
		output += '>' + names_dic[tag] + '\n' + seq_dic[str(tag)] + '\n'

	if '--build-new-db' in sys.argv:
		fout = open('concat.tmp.gb.names.fa','w')
	        fout.write(output)
        	fout.close()
	else:
		fout = open('concat.gb.names.fa','w')
		fout.write(output)
		fout.close()

if '--tree_bs'in sys.argv or '--tree' in sys.argv:
	os.system('rm RAxML*')
	if '--build-new-db' in sys.argv:
		os.system('fa2phy concat.tmp.gb.names.fa')
	else:
		os.system('fa2phy concat.gb.names.fa')
	if 'tree_bs' in sys.argv:
		if '--build-new-db' in sys.argv:
			os.system('raxmlHPC-PTHREADS-AVX -T ' + str(NPraxml) + ' -m PROTGAMMAJTTF -p 12345 -# 100 -s concat.tmp.gb.names.phy -n concat.tmp.gb.names.besttree_raxml.nwk')
		else:
			os.system('raxmlHPC-PTHREADS-AVX -T ' + str(NPraxml) + ' -m PROTGAMMAJTTF -p 12345 -# 100 -s concat.gb.names.phy -n concat.gb.names.besttree_raxml.nwk')
	else:
		if '--build-new-db' in sys.argv:
			os.system('raxmlHPC-PTHREADS-AVX -T ' + str(NPraxml) + ' -m PROTGAMMAJTTF -p 12345 -s concat.tmp.gb.names.phy -n concat.tmp.gb.names.besttree_raxml.nwk')
		else:
			os.system('raxmlHPC-PTHREADS-AVX -T ' + str(NPraxml) + ' -m PROTGAMMAJTTF -p 12345 -s concat.gb.names.phy -n concat.gb.names.besttree_raxml.nwk')
if '--post-tree' in sys.argv:
	if '--build-new-db' in sys.argv:
		
	        E = os.system('cp RAxML_result.concat.tree concat.tmp.gb.names.besttree_raxml.nwk')
        	if E != 0:
                	print "but do not worry, I got this!!!!"
	                os.system('cp RAxML_bestTree.concat.tmp.gb.names.besttree_raxml.nwk concat.tmp.gb.names.besttree_raxml.nwk')
        	os.system('rectaxontree2 concat.tmp.gb.names.besttree_raxml.nwk')
	        os.system('cp concat.tmp.gb.names.besttree_raxml.rec.nwk ' + sys.argv[1][:-4] + 'tmp.nwk')
        	print "Tree is ready under the name: " + sys.argv[1][:-4] + 'tmp.nwk'
	else:
		E = os.system('cp RAxML_result.concat.tree concat.gb.names.besttree_raxml.nwk')
		if E != 0:
			print "but do not worry, I got this!!!!"
			os.system('cp RAxML_bestTree.concat.gb.names.besttree_raxml.nwk concat.gb.names.besttree_raxml.nwk')
		os.system('rectaxontree2 concat.gb.names.besttree_raxml.nwk')
		os.system('cp concat.gb.names.besttree_raxml.rec.nwk ' + sys.argv[1][:-4] + 'nwk')
		print "Tree is ready under the name: " + sys.argv[1][:-4] + 'nwk'


print "----------------------------all done--------------------------"









#print "Saving the data"
#with open('data.json','w') as f:
#	json.dump(mongo_card, f, sort_keys=True, indent = 4)
#print "Done!"

