#! /usr/bin/env python 
###################################
#    Davi Ortega 7/8/2012 
###################################
import bitk
import os
import sys
import difflib
if '-h' in sys.argv:
	print 'Trim sequences by hmmer hit coordinates: trimbyhmm pfam_model.hmm fastafile.fa [options]\n \
	Options\n \t -m N for protein with multiple hits. N is the number of domains the protein needs to have to be selected. \n\t\t 0 allows for multiple domains. It will split the sequence in new entries for each domain and add numbers at the end of the tag\n \t -all (to be used with -m N where N != 0 or 1) brings all domains separately only from proteins with N hits\n\t --fullsequence Option forcing no trimm. It basically serves to select sequences with certain number of non-overlapping hits if used with -m option (do not use it... it is beta...) '
	sys.exit()

hmm_model = sys.argv[1]
fasta_file = sys.argv[2]

if '-m' in sys.argv:
	try:
		N = int(sys.argv[sys.argv.index('-m') +1])
	except:
		print " option -m needs the number of domains to be selected \n\n"
		os.system('trimbyhmm2 -h')
		sys.exit()



os.system('hmmsearch --noali --cut_tc ' + hmm_model + ' ' + fasta_file + ' > output_' + fasta_file[:-3] + '.dat')

seq_dic, seq_list = bitk.fastareader(fasta_file)
datafile = open('output_' + fasta_file[:-3] + '.dat','r')

new_seq_dic = {}
new_seq_list = []

new_seq_allopt = []
domain_seq = {}
output = ''

seq_list_count_domain = [] # this is a patch... This script needs to be redone. 

for line in datafile:
	if '>>' in line:
        	name = line.split(' ')[1]
		DN = 1 #domain number
                for line in datafile:
                       	if line[60:66].replace(' ','').isdigit():
				domain_seq[name] = DN
                               	start = int(line[60:66])
                               	end = int(line[68:74])
				seq_list_count_domain.append(name)
                               	#print name + '\t' + str(start) + '\t' + str(end)
                        	if '-m' in sys.argv:
					if N == 0:
						if '--fullsequence' in sys.argv:
							output += '>' + name + '-' + str(DN) + '\n' + seq_dic[name] + '\n'
						else:
							output += '>' + name + '-' + str(DN) + '\n' + seq_dic[name][start:end] + '\n'
						DN += 1
					else:
						#if DN == N and '-all' in sys.argv:
						#	new_seq_allopt.append(name)
						if '--fullsequence' in sys.argv:
							if name in new_seq_list:
								del(new_seq_dic[name + '-' + str(DN - 1)])
							new_seq_dic[name + '-' + str(DN)] =  seq_dic[name]
						else:
#							print name
#							for tags in seq_list:
#								if tags.split('-')[0] == name.split('-')[0]:
#									print tags		
#									print '\n'.join(difflib.ndiff([name], [tags.replace(' ','')]))
#							print seq_dic[name]
							new_seq_dic[name + '-' + str(DN)] =  seq_dic[name][start:end]
						new_seq_list.append(name + '-' + str(DN))
						DN += 1
				else:
					output += '>' + name + '\n' + seq_dic[name][start:end] + '\n'
					#new_seq_dic[name] = seq_dic[name][start:end]
					#new_seq_list.append(name)
					break
			else:
				if line == '\n' :
					break
		if DN == N + 1 and '-all' in sys.argv:
			new_seq_allopt.append(name)
datafile.close()

print new_seq_allopt[:10]

if '-m' in sys.argv and N != 0:
	for seq in new_seq_list:
		if '-all' in sys.argv and '-'.join(seq.split('-')[:-1]) in new_seq_allopt:
			output += '>' + seq + '\n' + new_seq_dic[seq] + '\n'
		elif '-all' not in sys.argv:
			if seq_list_count_domain.count('-'.join(seq.split('-')[0:-1])) == N:
				output += '>' + seq + '\n' + new_seq_dic[seq] + '\n'


outfile = open(fasta_file[:-3] + '.hmmtrim.fa', 'w')
outfile.write(output)
outfile.close()
print 'Done'
