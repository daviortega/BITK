#! /usr/bin/env python 
###################################
#    Davi Ortega 8/16/2012 
###################################
#version 2 graduated on 08/23/2012
###################################

import sys
import bitk
import os
import networkx as nx
import matplotlib.pyplot as plt


if '-h' in sys.argv:
	print 'COG-finder with BLAST. It takes two alignments: the first is the database and the second is the query. Option -plot for plot'
	sys.exit()

#np = sys.argv[2]
filename = sys.argv[1]
dbname = 'temp.' + filename[:-2] + 'db'
blastname = 'output_blastp.' + filename[:-2] + 'dat'
outfile = filename[:-2] + 'blastpall.dat'
query =  sys.argv[2]
seq_dic, seq_list = bitk.fastareader(query)

if "-skip" not in sys.argv:

	os.system('rm ' + blastname)
	os.system('rm ' + dbname + '*')
	os.system('rm ' + outfile)


	print 'Building Database'
	os.system('formatdb -i ' + filename + ' -n ' + dbname )
	
	print 'Running blastp'
	#os.system('blastp -db ' + dbname + ' -query ' + filename + ' -out ' + blastname + ' -evalue 1000000 -max_target_seqs 10000 -num_alignments 10000 -outfmt "6 qseqid sseqid bitscore" -comp_based_stats no -seg no -num_threads 10')

	query =  sys.argv[2]
	seq_dic, seq_list = bitk.fastareader(query)
	os.system('blastp -db ' + dbname + ' -query ' + query + ' -out ' + blastname + ' -num_threads 10 -outfmt "6 qseqid sseqid bitscore evalue " -evalue 0.001 -max_target_seqs 100000' )



#os.system('blastall -p blastp -d ' + dbname + ' -i test.fa -o ' + blastname + ' -e 100000000000 -b 100000000 -m 8')

print 'Parsing blast results'

data_dic = {}
data_list = []

datafile = open(blastname,'r')
output = ''

for line in datafile:
	field = line.replace('\n','').split('\t')
#	while '' in field:
#		field.remove('')
	qry = field[0]
	hit = field[1]
	if hit != qry:
		if qry not in data_dic:
			data_dic[qry] = {}
			data_list.append(qry)
		try:
			hit_orgid = hit.split('-')[0]
		except IndexError:
			print hit.split('-')[0]
			sys.exit()
		if hit_orgid not in [ i.split('-')[0] for i in data_dic[qry].keys()]:
			data_dic[qry][hit] = [ float(i) for i in field[2:] ]
                        output += qry + '\t' + hit + '\t' + field[2]
		else:
			for i in data_dic[qry].keys():
				if hit_orgid == i.split('-')[0]:
#					print field
#					print data_dic[qry][i]
					if data_dic[qry][i][1] > float(field[3]):
						del data_dic[qry][i]
						data_dic[qry][hit] = [ float(i) for i in field[2:] ]
	

datafile.close()



for tag in data_list:
	for key in data_dic[tag].keys():
		if key in data_list:
			if tag in data_dic[key].keys():
				print "one pair"
				print tag
	                	print key
				print data_dic[key][tag]


# Making the COGs and building edges

G = nx.Graph()
#G.add_nodes_from(data_list)
recip_hit = []
uni_hit = []

groups = []

for qry in data_list:
	new = 0
	print qry
#	print groups
	grp = -1
	for group in groups:
		if qry in group:
			grp = groups.index(group)
			break
		for hit in group:
			if hit in data_dic[qry].keys() and qry in data_dic[hit].keys():
				grp = groups.index(group)
				break 
	
	if grp == -1:
		groups.append([qry])
		grp = groups.index([qry])
		new = 1
	for hit in data_dic[qry].keys():
		if hit in data_list:
			if qry in data_dic[hit].keys():
				score = max(data_dic[hit][qry][0],data_dic[qry][hit][0])
				G.add_edge(qry,hit, weigth = score)
				recip_hit.append((qry,hit))
				if hit not in groups[grp]:
					groups[grp].append(hit)
			else:
				G.add_edge(qry,hit, weigth = data_dic[qry][hit][0])
				uni_hit.append((qry,hit))

	for group in groups[:grp] + groups[grp+1:]:
#		print group
		merge = 0
		for i in group:
			if i in groups[grp]:
#				print i
				grp_i = groups.index(group)				
				groups[grp_i] = list(set(groups[grp] + groups[grp_i]))
				del groups[grp]
				merge = 1
				break
		if merge == 1:
			break
#	print groups

#Printing stuff
print len(data_list)
print len(groups)
nodes = []
for group in groups:
#	nodes += [ i.split('-')[1] for i in group ]
	nodes += group
print len(nodes)
#print [ i for i in data_dic.keys() if data_list[1] in data_dic[i].keys()]
for g in groups:
	if len(g) > 3:
		print g


G.add_nodes_from(nodes)
pos = nx.spectral_layout(G)
nx.draw_networkx_nodes(G,pos, node_size = 2)
nx.draw_networkx_edges(G,pos, edgelist=recip_hit, width = 1, edge_color = 'r')
nx.draw_networkx_edges(G,pos, edgelist=uni_hit, width = 0.1, alpha = 0.3, edge_color = 'b', style = 'dashed')
#nx.draw_networkx_labels(G,pos)

if '-plot' in sys.argv:
	plt.show()


dataout = open(outfile,'w')
dataout.write(output)
dataout.close()

#os.system('data.frame2matrix ' + outfile + ' -sep ";" -D -fd0')



print 'Done'
	

