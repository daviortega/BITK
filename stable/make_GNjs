#! /usr/bin/env python 
###################################
#    Davi Ortega 11/25/2013 
###################################
import sys
import numpy
import bitk
import json

if '-h' in sys.argv:
    print 'make_GN fasta_file.fa N \n\n N is window [-N,+N] \n\n Options :\n \
	-pdf		Makes a pdf instead of printing on screen \n \
	-name		Include the name of the chemotaxis genes \n \
	-locus		Include name of the locus number of each gene (it is messy, but you should be able to disentangle the info in post-production)\n \
	-org		Reference name will be Name of the strain  -  locus number - GN\n \
	--prod		Product descreption (TODO)\n \
	--refseq	RefSeq gene name (TODO)\n \
	--order_st	Correct the direction of the genes by the central gene direction poiting to the right \n \
	--sort		Sort list of sequnces by alphabetical order \n \
	--svg		output svg file\n \
	--che_color	color chemotaxis proteins if any\n \
	--output	output table with locus info of the genes represented in the plot\n \
	--show		Show GN in window\n '

    sys.exit()




che_array = [ 'mcp',  'chea',  'cheb',  'checx', 'ched', 'cher', 'chev', 'chez','chew', 'other', '' ]
che_dic = {'mcp':'#6C5735', 'chea': '#ED1C24',  'cheb' : '#006F3B' ,  'checx' : '#2E3192', 'ched':'#8DC63F', 'cher':'#F392BD', 'chev':'#92278F', 'chez':'#231F20','chew':'#FFF200', 'other':'#F7941E','':'#FFFFFF'}

che_colors = [ '#6C5735', '#ED1C24', '#006F3B', '#2E3192', '#8DC63F', '#F392BD', '#92278F', '#231F20', '#FFF200', '#F7941E', '#FFFFFF']

N = int(sys.argv[2]) 



#MONGO
mist = bitk.get_mist22_client()
#END MONGO 


seq_dic, seq_list = bitk.fastareader(sys.argv[1])
col = len(seq_list)

jsout = []
coords_list = []
largest_operon = 0

output = ''


mistake = []

for i in range(len(seq_list)):
	opid = i
	print "\n\n Starting new..."
	tag = seq_list[i]
	print tag
	mistid = int(tag.split('-')[0].split('.')[-1])
	new_tag = mist.genomes.find_one({'_id':mistid})
	if new_tag:
		print new_tag
		print new_tag['n']
		org = new_tag['n']
	else:
		print "Can't find genome " + tag
		print "Exiting now"
		sys.exit()
	

	ft = '-'.join(tag.split('-')[3:])

	ac = tag.split('-')[2]
	lo = tag.split('-')[1]
	print ac
	geneinfo = mist.genes.find_one({'p.ac': ac})
	if geneinfo == None:
		geneinfo = mist.genes.find_one({'lo': lo})
	print geneinfo
	cid = geneinfo['cid']
	pos = geneinfo['pos']
	aseq = geneinfo['p']['aid']
	try:
		ref = geneinfo['ns']
	except KeyError:
		ref = "NULL"

	if pos - N > 0:
		pos = pos - N - 1
	else:
		pos = 0
	
	GN = {}
	pos_list = []
	for g in mist.genes.find({'cid': cid, 'pos':{ '$gt': pos }}).limit(2*N+1):
		GN[g['pos']] = g
		pos_list.append(g['pos'])
	pos_list.sort()
	
	pr = []	# product
	lo = [] # locus
	rs = [] # refseq
	ch = [] # chemotaxis
	st = [] # direction
	ps = [] # position { "s" : start, "l" = length }
	
	so = -1

	ope = []

	for pos in pos_list:
		chemo_info = mist.signal_genes5.find_one({'cid':cid, '_id':GN[pos]['_id']})
		che = ''
		try:
			loc = GN[pos]['lo']
		except KeyError:
			print GN[pos]
			loc = 'NULL'
			sys.exit()
		try:
			pro = GN[pos]['p']['pd']
		except KeyError:
			pro = 'NULL'

		try:
			ref = GN[pos]['ns']
		except KeyError:
			ref = 'NULL'

		try:
			aseq2 = GN[pos]['p']['aid']
		except KeyError:
			aseq2 = 'NULL'

		if chemo_info:
			if 'r' in chemo_info.keys():
#               	        print chemo_info
              			if chemo_info['r'][0] == 'chemotaxis':
                               		che = chemo_info['r'][1]
		print loc + ':' + che

		aa = GN[pos]['aa'] # start
		ab = GN[pos]['ab'] # finish
	
		if so == -1:
			so = aa
		if GN[pos]['lo'] == tag.split('-')[1]:
			br = 3
		else:
			br = 1

	
		ps.append({ 's' : aa - so, 'l' : ab - aa , 'st' : GN[pos]['st'], 'lo' : loc, 'pr' : pro, 'ref' : ref, 'ch' : che, 'co' : che_dic[che], 'url' : 'http://mistdb.com/proteins/view/' + str(GN[pos]['_id']), 'br' : br, 'as' : aseq2 } )
	
	jsout.append( { 'org' : org,  'ps' : ps, 'ft' : ft, 'opid' : i, 'q' : tag , 'as' : aseq } )

print jsout

with open(sys.argv[1][:-3] + '.GN.json', 'w') as f:
	json.dump(jsout, f, indent = 2)

sys.exit()

if 1 == 1:

	operon_size = max(coords[-1][:2]) - min(coords[0][:2])
	if operon_size > largest_operon:
		largest_operon = operon_size
	if len(coords) == 2*N+1:
		coords_list.append(coords)
		print tag
	else:
		print 'This did not work well and it will be excluded: ' + tag
		mistake.append(tag)
	print "All done here"

sf = 1/float(largest_operon+100)
 
print "\nStarting plotting"
for i in range(len(coords_list)):
	print str(i) + "/" + str(len(coords_list))
	print coords_list[i]
	coords = coords_list[i]
#	if '-org' not in sys.argv:
#		ax = fig.add_subplot(col,3,3*i+3)
#		ax.axis('off')
#	else:
	ax = fig.add_subplot(col,2,2*i+2)
#	ax.axis('off')
#	sf = 1/float(ab - coords[0][0])
	
	if '--order_st' in sys.argv and coords[N][2] == '-':
		beg = coords[0][0]
		coords.reverse()
		new_coords = []
		for i in range(len(coords)-1):
			end = beg + coords[i][1] - coords[i][0]
			if coords[i][2] == '-':
				new_coords.append([ beg, end , '+', coords[i][3], coords[i][4], coords[i][5]])
			else:
				new_coords.append([ beg, end , '-', coords[i][3], coords[i][4], coords[i][5]])
			beg = end + coords[i][0] - coords[i+1][1]
		end = beg + coords[-1][1] - coords[-1][0]
                if coords[i][2] == '-':
                        new_coords.append([ beg, end , '+', coords[-1][3], coords[i][4], coords[i][5]])
                else:
                        new_coords.append([ beg, end , '-', coords[-1][3], coords[i][4], coords[i][5]])
		coords = new_coords
	
	

	beg = coords[0][0]

	W = 2

	for coord in coords:
#		start = coord[0]*sf
#		end = (coord[0] - coord[1])*sf
		start = (coord[0]-beg)*sf
		dx = (coord[1] - coord[0])*sf
#		ax.add_patch(mpatches.Arrow(start,1.5,dx,0,width = W,color = colors_array[coords.index(coord)]))
		output += coord[4] + ':' + coord[3] + ';'
		if '--che_color' in sys.argv:
			color_str = che_colors[che_array.index(coord[3])]
		else:
			color_str = 'white'

		if '-locus' in sys.argv:
			ax.text(start+dx/2, 0.5, coord[4], ha = 'center', size = 10)
			if coord[2] == '+':
	                        ax.add_patch(mpatches.Arrow(start,0.5,dx-0.001,0,width = W,ec = 'black', color = color_str))
        	                ax.axis('off')
                	else:
                        	ax.add_patch(mpatches.Arrow(start+dx,0.5,0.001-dx,0,width = W,ec = 'black',  color = color_str))
	                        ax.axis('off')
		if '--pro' in sys.argv:
			ax.text(start+dx/2, 1, coord[5], ha = 'center', size = 10)
			if coord[2] == '+':
				ax.add_patch(mpatches.Arrow(start,0.5,dx-0.001,0,width = W,ec = 'black', color = color_str))
				ax.axis('off')
			else:
				ax.add_patch(mpatches.Arrow(start+dx,0.5,0.001-dx,0,width = W,ec = 'black',  color = color_str))
				ax.axis('off')

		elif '-name' in sys.argv:
			print coord
			ax.text(start+dx/2, 0.8, che_dic[coord[3]], ha = 'center', size = 10)
			if coord[2] == '+':
				ax.add_patch(mpatches.Arrow(start,0.5,dx-0.001,0,width = W,ec = 'black', color = che_colors[che_array.index(coord[3])]))
				ax.axis('off')
			else:
				ax.add_patch(mpatches.Arrow(start+dx,0.5,0.001-dx,0,width = W,ec = 'black', color = che_colors[che_array.index(coord[3])]))
				ax.axis('off')
		else:
			if coord[2] == '+':
                	        ax.add_patch(mpatches.Arrow(start,0.5,dx-0.001,0,width = W,ec = 'black',  color = color_str))
        	                ax.axis('off')
	                else:
                        	ax.add_patch(mpatches.Arrow(start+dx,0.5,0.001-dx,0,width = W,ec = 'black',  color = color_str))
	                        ax.axis('off')

	output = output[:-1] + '\n'

#	ax.axis('off')
#       ax.autoscale_view()
        ax.figure.canvas.draw()

if '--output' in sys.argv:
        with open(sys.argv[1][:-3] + '.GN.dat', 'w') as f:
	                f.write(output)
			#plt.xticks([])
print '\n'
if '-pdf' in sys.argv:
	plt.savefig(sys.argv[1][:-3] + '.GN.pdf')

if '--svg' in sys.argv:
	plt.savefig(sys.argv[1][:-3] + '.GN.svg')

if '--show' in sys.argv:
	plt.show()

print mistake



	

