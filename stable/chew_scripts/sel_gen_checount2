#! /usr/bin/env python 
###################################
#    Davi Ortega 6/30/2012 
###################################
#   version 2 - 03/09/2013
###################################
import sys
if '-h' in sys.argv:
	print 'select the genomes (by mist_id) that contains the specific number of che sequences\n Sintax: sel_gen_checount2 table.dat  -t taxonomic_group -r complete mcps    chea    cheb     checx    ched   cher    chev    chez    chew   adap=(cheW + CheV)'
	print """
complete mcps  chea    cheb    checx   ched    cher    chev    chez    chew    adap=(chew + chev)
 True for complete genomes, False for drafts and A for any
 use N+ for N and larger than N
 use N- for N and less than N
 use A for any
 use N1_N2 for between N1 and N2 (inclusive)"""
	sys.exit()

#complete chea    chew    mcp     cheb    checx   ched    cher    chev    chez    other
# 1 for complete genomes, 0 for drafts and A for any
# use N+ for N and larger than N
# use N- for N and less than N
# use A for any
# use N1_N2 for between N1 and N2 (inclusive)

# input parser

if '-t' in sys.argv:
	taxon = sys.argv[sys.argv.index('-t')+1]

if '-r' in sys.argv:
	rules = sys.argv[sys.argv.index('-r')+1:]
else:
	print "gotta give me some rules... "
	print '-h for help'
	sys.exit()

datafile = open(sys.argv[1],'r')
print rules

list_bugs = []
first = 0
for line in datafile:
	fields = line.replace('\n','').split('\t')
	if first == 0:
		i_mistd = fields.index('MiST22id')
		i_rules = fields.index('complete')
		i_chew = fields.index('chew')
		i_chev = fields.index('chev')
		first = 1
	elif ('-t' in sys.argv and taxon in fields) or ('-t' not in sys.argv):	
		#rule checker:
		test = True
		for N in range(0,len(rules)):
			if N == 0:
				pass
			elif N != len(rules)-1:
				prot_num = int(fields[N+i_rules])
			else:
				prot_num = int(fields[i_chev]) + int(fields[i_chew])
			if rules[N] == 'A':
				test = True
			elif rules[N] in ['True','False']:
				if fields[N+i_rules] != rules[N]:
                                        test = False
                                        break
			elif rules[N].isdigit():
				if int(rules[N]) != prot_num:
					test = False
					break
			elif rules[N][-1] == '+':
				if int(rules[N][:-1]) > prot_num:
					test = False
					break
			elif rules[N][-1] == '-':
				if int(rules[N][:-1]) < prot_num:
					test = False
					break
			elif '_' in rules[N]:
				interval = rules[N].split('_')
				if int(interval[0]) > prot_num or int(interval[1]) < prot_num:
					test = False
					break
			elif N == 0:
				if fields[N+i_rules] != rules[N]:
					test = False
					break
			else:
				print 'something is wrong'
				print line
				print rules
				print fields
				sys.exit()
#		if N != len(rules):
#			print 'break in rule: ' + str(N)
		if test:
			list_bugs.append(fields[i_mistd])
#			print fields
#		elif N == 3:
#			print 'BREAK'
#			print fields
datafile.close()
output = ''
for bug in list_bugs:
	output += bug + '\n'

outfile = open('selected_genomes.txt','w')
outfile.write(output)
outfile.close()



print len(list_bugs)
			
